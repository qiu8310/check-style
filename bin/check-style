#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var op = require('open');
var pkg = require('../package.json');

var cfg = {
  jshint: {
    alias: 'hint',
    config: '.jshintrc',
    extensions: ['js'], // 当没有指定使用的 lint 引擎时，就自动根据此后缀来判断是否应该使用此引擎
    index: 'http://jshint.com/docs/options/',
    specify: 'http://jshint.com/docs/options/#[name]'
  },
  eslint: {
    alias: 'jsx',
    config: '.eslintrc',
    extensions: ['jsx'],
    outputSuccess: true,  // 原生的命令没有错误时不会有任何输出，这里需要统一输出一个成功消息
    index: 'http://eslint.org/docs/rules/',
    specify: 'http://eslint.org/docs/rules/[name]'
  },
  jscs: {
    config: '.jscsrc',
    extensions: ['js'],
    index: 'http://jscs.info/rules.html',
    specify: 'http://jscs.info/rule/[name]'
  },
  sasslint: {
    bin: 'sass-lint',
    alias: 'sass',
    extensions: ['scss', 'sass'],
    config: '.sass-lint.yml',
    outputSuccess: true,
    index: 'https://github.com/sasstools/sass-lint/tree/develop/lib/rules',
    specify: 'https://github.com/sasstools/sass-lint/blob/develop/lib/rules/[name].js'
  },
  csscomb: {
    alias: 'comb',
    autoRun: false,  // 默认是不运行的，只有指定了才会运行
    extensions: ['css', 'scss', 'sass', 'less'],
    config: 'csscomb.json',
    index: 'https://github.com/csscomb/csscomb.js/blob/master/doc/configuration.md',
    specify: 'https://github.com/csscomb/csscomb.js/blob/master/doc/configuration.md'
  }
};

var exclude = [],
  include = [],
  ext = [],
  collect = function (val, vals) { vals.push(val); return vals; };

function getOptions() {
  var keys = Object.keys(cfg);
  var result = {};

  // config and engine
  keys.forEach(function (key) {
    var configKey = key + 'Config';
    if (program[configKey]) result[configKey] = program[configKey];

    if (program[key]) result[key] = program[key];
  });

  // debug and force
  result.debug = !!program.debug;
  result.force = !!program.force;

  // 要处理的文件
  result.ext = ext;
  result.exclude = exclude;
  result.include = program.args.concat(include);

  return result;
}
function mapConfigFile(key) {
  return '--' + key + '-config';
}
function mapConfigLint(key) {
  return (key.length === 1 ? '-' : '--') + key;
}

program
  .version(pkg.version)
  .usage('[options] [files]')
  .description('利用 jshint、jscs、eslint 和 sasslint 检查项目下的源文件写法风格')

  .option('-e, --exclude <globPatterns>', '要排除的文件的 glob patterns', collect, exclude)
  .option('-i, --include <globPatterns>', '要包含的文件的 glob patterns', collect, include)
  .option('--ext <extensionName>', '指定要自动查找的文件的后缀名', collect, ext)
  .option('-f, --force', '即使有错误出现，也强制程序往下执行')
  .option('-d, --debug', '输出调试信息');


Object.keys(cfg).forEach(function (key) {
  var opt = cfg[key];
  opt.alias = [].concat(opt.alias || []);
  opt.keys = opt.alias.concat(key);

  var configFileOpts = cfg[key].keys.map(mapConfigFile).join(', ');
  program.option(configFileOpts + ' <file>', key + ' 配置文件');
});

Object.keys(cfg).forEach(function (key) {
  var lintOpts = cfg[key].keys.map(mapConfigLint).join(', ');
  program.option(lintOpts, '使用 ' + key);
});

var cs = require('../')(cfg);

program
  .command('manual <engine> [configName]')
  .alias('m')
  .description('打开浏览器查看 jscs 或 jshint 或 eslint 中的某个配置的含义')
  .action(function (engine, configName) {
    if (!cfg[engine]) {
      Object.keys(cfg).some(function (key) {
        if (cfg[key].keys.indexOf(engine) >= 0) { engine = key; return true; }
      });
    }

    var opts = cfg[engine];
    if (!opts) throw new Error('Engine should be one of ' + Object.keys(cfg).join(', '));
    op(configName ? opts.specify.replace('[name]', configName) : opts.index);
    process.exit(0);
  });

program
  .command('write')
  .alias('w')
  .description('将指定的 rc 配置文件写入项目根目录（或当前目录）')
  .action(function () {
    cs.write(getOptions());
    process.exit(0);
  });

program
  .command('order')
  .alias('o')
  .description('输出 CSS 关键属性的排列的顺序')
  .action(function () {
    console.log(require(path.resolve(__dirname, '..', cfg.csscomb.config))['sort-order'].join('\n'));
    process.exit(0);
  });

program.parse(process.argv);
cs.lint(getOptions());





